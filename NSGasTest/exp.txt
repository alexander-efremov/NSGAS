// real test 
static const int C_N = 1200;
static const int C_N1 = 800;
static const int C_q = 101;
static const int C_qq = 20;
static const double C_hx = 1.0 / 100;
static const double C_hy = 1.0 / 200;

Intel Core i5 Work
Before Mu was precomputated in seq:
Seq:2.55 s
Par:1.01 s
Rel:2.52 s

After Mu was precomputated in seq:
Seq:1.70
Par:1.00
Rel:1.68

ICPC Seq optimized (Mu was precomputated)
1.70 s

ICPC Par optimized Openmp have't been linked
2.24 s ??? Dynamic Arrays? Yes, this is because of dynamic arrays. 

ICPC Par optimized Openmp have't been linked and dynamic -> static
seq:1.75 s
par:1.62 s
rel:1.08

ICPC Par optimized Openmp HAVE been linked and dynamic -> static 1 thread
seq:1.75 s
par:2.16 s
rel:0.81

ICPC Par optimized Openmp HAVE been linked and dynamic -> static 4 thread
seq:1.7
par:0.88
rel:1.94

ICPC Par optimized 1 thread
2.71 s

ICPC Par optimized 4 threads
1.01 s


Intel Core i5  Work
ICPC Seq was reworked for dynamic arrays
/---

ICPC Par optimized Openmp haven't been linked 
seq:1.99
par:2.22
rel:0.89

ICPC Par optimized Openmp HAVE been linked 1 thread
seq:1.98
par:2.72
rel:0.72

ICPC Par optimized Openmp HAVE been linked 4 thread
seq:2.00
par:1.00
rel:2.00

Vectorization:
Before any vectorization:
IPO enabled:
Seq: 1.97 s
Par: 0.90 s
Speedup: 2.17
IPO disabled:
Seq:2.21 s
Par:0.93 s
Speedup: 2.37


